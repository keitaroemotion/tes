#!/usr/bin/env ruby

require "colorize"

ARGV.empty? && abort("you need argument [all][set][path]")

def kill_processes(root_dir)
  # kill (initialize) processes of each modules
  [
    "postgres",
    "redis-server",
    "elasticsearch",
    "rails",
    "#{root_dir}/bin/rails",
  ].each do |process|
    system "ps aux | grep #{process} | awk '{print}' | xargs kill -9 "
  end
end

def execute_shell(command, delay = 0)
  puts delay == 0 ? "" : "sleep #{delay}..."
  puts "[>>] #{command.green} "
  system "#{command}"
end

def setter_array(root_dir)
  kill_processes root_dir
  [
    # server / database setups
    ["elasticsearch &", 0],
    ["postgres -D /usr/local/var/postgres &", 0],
    ["redis-server /usr/local/etc/redis.conf &", 0],
    ["#{root_dir}/bin/rake db:create db:schema:load &", 5],
    # gateway launching
    ["#{root_dir}/bin/rails s -p4500 &", 10],
    # seed database
    ["#{root_dir}/bin/rake db:seed --trace &", 15],
    # elastic server launching
    ["#{root_dir}/bin/rake elasticsearch:import:bulk &", 25],
  ]
end

def unit_test
  [["bundle exec ruby -I test #{ARGV[0]} #{ARGV[1]} #{ARGV[2]}", 0]]
end


def quick_tests
#  print "[denom: ]".green
#  denom = $stdin.gets.chomp
  denom = 2 

  test_files = Dir.glob("test/**/*").select do |file|
    File.directory?(file) 
  end
  .select do |dir|
    Dir["#{dir}/*"].select do |file|
      file.end_with?("_test.rb")
    end.size > 0
  end

  if test_files.size/denom.to_i < 1
    puts "[denominator is wrong]".red
    abort
  end

  test_files.each_slice(test_files.size/denom.to_i).to_a
    .map { |clan|
      [
        clan.inject("") do |acc, test_class|
          acc + "bundle exec ruby -I test #{test_class}/*_test.rb ;"
        end,
        0
      ]  
    }
end

def get_test_plan(option, root_dir)
  return quick_tests if option == "quick"
  return [["#{root_dir}/bin/rake test:all ", 0]] if option == "all"
  return setter_array(root_dir) if option == "set"
  return unit_test if /^(all|set)$/.match(option).nil?
end

root_dir = "."
# calling shell scripts simultaneously.
# the integer value of each array element is start time delay
# (for these commands have execution orders)

option = ARGV[0]
start = Time.now

Thread.new do
  plans = get_test_plan(option, root_dir)
  max =  plans.flatten.size
  if option == "quick"
    print "["
    (0...plans.size).each do |x|
      print "#{x}, "
    end
    print "] "
    input = $stdin.gets.chomp
    if !(0...plans.size).map{ |x| x.to_s }.include?(input)
      puts "[input wrong!]".magenta
      abort
    end
    print "plans size: #{plans.flatten.size} ".green
    plans = [plans[input.to_i]]
    puts " >> #{plans.flatten.size}".cyan
  end
  plans.each do |order|
    execute_shell order[0], order[1]
  end  
end.join

system "afplay /System/Library/Sounds/Ping.aiff"
puts "[Time Spent >>]".cyan + " #{Time.now - start} sec"
